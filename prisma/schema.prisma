generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          Role      @default(MEMBER)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  accounts      Account[]
  coin          Coin[]
  event         Event[]
  sessions      Session[]
  profile       Profile?

  @@map("users")
}

model Account {
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Coin {
  id               Int             @id @default(autoincrement())
  user_id          String
  amount           Int
  type             TransactionType
  transaction_date DateTime        @default(now())
  users            User            @relation(fields: [user_id], references: [id])

  @@map("coins")
}

model Event {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  start_date  DateTime
  created_by  String
  created_at  DateTime @default(now())
  updated_at  DateTime
  users       User     @relation(fields: [created_by], references: [id])

  @@map("events")
}

model Profile {
  id            Int            @id @default(autoincrement())
  user_id       String         @unique
  first_name    String
  last_name     String
  phone_number  String
  address       String
  in_game_name  String
  lane          Lane[]
  interested_in InterestedIn[]
  users         User           @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("profiles")
}

enum InterestedIn {
  SOLO_PLAYER
  FIND_FRIENDS
  GAIN_EXPERIENCE
  CREATE_CONTENT
  GEOGRAPHICAL_TITLE
}

enum Lane {
  OFF_LANE
  SUPPORT
  ABYSSAL_LANE
  MID_LANE
  JUNGLE
}

enum Role {
  MEMBER
  ADMIN
}

enum TransactionType {
  EARNED
  SPENT
  DEDUCTED
}
